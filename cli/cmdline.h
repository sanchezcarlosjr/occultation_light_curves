/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "slc"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "slc"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int verbose_flag;	/**< @brief Produce verbose output (default=off).  */
  const char *verbose_help; /**< @brief Produce verbose output help description.  */
  char * output_arg;	/**< @brief Specify output file.  */
  char * output_orig;	/**< @brief Specify output file original value given at command line.  */
  const char *output_help; /**< @brief Specify output file help description.  */
  int M_arg;	/**< @brief Mesh size in pixels (default='2048').  */
  char * M_orig;	/**< @brief Mesh size in pixels original value given at command line.  */
  const char *M_help; /**< @brief Mesh size in pixels help description.  */
  double lamb_arg;	/**< @brief Wavelength in meters (default='6.00e-7').  */
  char * lamb_orig;	/**< @brief Wavelength in meters original value given at command line.  */
  const char *lamb_help; /**< @brief Wavelength in meters help description.  */
  int vE_arg;	/**< @brief Earth's translation speed in m/s (default='29800').  */
  char * vE_orig;	/**< @brief Earth's translation speed in m/s original value given at command line.  */
  const char *vE_help; /**< @brief Earth's translation speed in m/s help description.  */
  int vr_arg;	/**< @brief Speed of the body if it goes against the direction of the earth in m/s (default='5000').  */
  char * vr_orig;	/**< @brief Speed of the body if it goes against the direction of the earth in m/s original value given at command line.  */
  const char *vr_help; /**< @brief Speed of the body if it goes against the direction of the earth in m/s help description.  */
  int ang_arg;	/**< @brief Angle from opposition to calculate the tangential speed of the object in degrees (default='30').  */
  char * ang_orig;	/**< @brief Angle from opposition to calculate the tangential speed of the object in degrees original value given at command line.  */
  const char *ang_help; /**< @brief Angle from opposition to calculate the tangential speed of the object in degrees help description.  */
  int fps_arg;	/**< @brief Frames per second (default='20').  */
  char * fps_orig;	/**< @brief Frames per second original value given at command line.  */
  const char *fps_help; /**< @brief Frames per second help description.  */
  int mV_arg;	/**< @brief Apparent magnitude of the star (default='12').  */
  char * mV_orig;	/**< @brief Apparent magnitude of the star original value given at command line.  */
  const char *mV_help; /**< @brief Apparent magnitude of the star help description.  */
  int nEst_arg;	/**< @brief Spectral type selection of the star (default='30').  */
  char * nEst_orig;	/**< @brief Spectral type selection of the star original value given at command line.  */
  const char *nEst_help; /**< @brief Spectral type selection of the star help description.  */
  int nLamb_arg;	/**< @brief Number of wavelengths to consider for spectral calculation (default='10').  */
  char * nLamb_orig;	/**< @brief Number of wavelengths to consider for spectral calculation original value given at command line.  */
  const char *nLamb_help; /**< @brief Number of wavelengths to consider for spectral calculation help description.  */
  int d_arg;	/**< @brief Diameter of the object in meters (default='3000').  */
  char * d_orig;	/**< @brief Diameter of the object in meters original value given at command line.  */
  const char *d_help; /**< @brief Diameter of the object in meters help description.  */
  double ua_arg;	/**< @brief Distance of the object in astronomical units (default='45').  */
  char * ua_orig;	/**< @brief Distance of the object in astronomical units original value given at command line.  */
  const char *ua_help; /**< @brief Distance of the object in astronomical units help description.  */
  int toffset_arg;	/**< @brief Offset in pixels (default='0').  */
  char * toffset_orig;	/**< @brief Offset in pixels original value given at command line.  */
  const char *toffset_help; /**< @brief Offset in pixels help description.  */
  int T_arg;	/**< @brief Reading direction in degrees (default='0').  */
  char * T_orig;	/**< @brief Reading direction in degrees original value given at command line.  */
  const char *T_help; /**< @brief Reading direction in degrees help description.  */
  int b_arg;	/**< @brief Impact parameter in meters (default='0').  */
  char * b_orig;	/**< @brief Impact parameter in meters original value given at command line.  */
  const char *b_help; /**< @brief Impact parameter in meters help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int M_given ;	/**< @brief Whether M was given.  */
  unsigned int lamb_given ;	/**< @brief Whether lamb was given.  */
  unsigned int vE_given ;	/**< @brief Whether vE was given.  */
  unsigned int vr_given ;	/**< @brief Whether vr was given.  */
  unsigned int ang_given ;	/**< @brief Whether ang was given.  */
  unsigned int fps_given ;	/**< @brief Whether fps was given.  */
  unsigned int mV_given ;	/**< @brief Whether mV was given.  */
  unsigned int nEst_given ;	/**< @brief Whether nEst was given.  */
  unsigned int nLamb_given ;	/**< @brief Whether nLamb was given.  */
  unsigned int d_given ;	/**< @brief Whether d was given.  */
  unsigned int ua_given ;	/**< @brief Whether ua was given.  */
  unsigned int toffset_given ;	/**< @brief Whether toffset was given.  */
  unsigned int T_given ;	/**< @brief Whether T was given.  */
  unsigned int b_given ;	/**< @brief Whether b was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
